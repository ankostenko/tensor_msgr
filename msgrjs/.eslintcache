[{"C:\\dev\\Websites\\messanger\\msgrjs\\src\\index.js":"1","C:\\dev\\Websites\\messanger\\msgrjs\\src\\reportWebVitals.js":"2","C:\\dev\\Websites\\messanger\\msgrjs\\src\\App.js":"3"},{"size":529,"mtime":1607539048755,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1607177729446,"results":"6","hashOfConfig":"5"},{"size":17655,"mtime":1607620209598,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"vbmi8k",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"C:\\dev\\Websites\\messanger\\msgrjs\\src\\index.js",[],["16","17"],"C:\\dev\\Websites\\messanger\\msgrjs\\src\\reportWebVitals.js",[],"C:\\dev\\Websites\\messanger\\msgrjs\\src\\App.js",["18","19"],"import \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport { Affix, Form, Layout } from \"antd\";\nimport { useForm } from \"antd/lib/form/Form\";\nimport Logo from \"./logo_transparent.png\";\nimport Axios from \"axios\";\n\nconst URL = \"localhost:3000\";\n\n/**\n * Fetch all messages by chat identifier\n */\nfunction getAllMessagesByChatID(chat_id) {\n  return [];\n}\n\n/**\n *  Renders chat item\n */\nconst Chat = (props) => {\n  return (\n    <div onClick={() => props.chooseChat(props.chat)} className=\"flex bg-gray-50 h-16 hover:bg-yellow-200 cursor-pointer\">\n      <div className=\"flex-none\">\n        <div className=\"inline-block h-10 w-10 rounded-full ring-2 ring-white m-3\" alt=\"user_avatar\">\n          <div className=\"text-bold\">{props.chat.name.toLocaleUpperCase()[0]}</div>\n        </div>\n      </div>\n      <div className=\"flex-1 mt-3 overflow-auto\">\n        <div className=\"font-bold flex justify-start subpixel-antialiased\">{props.chat.name}</div>\n        <div className=\"font-medium truncate subpixel-antialiased\">{props.chat.message}</div>\n      </div>\n      <div className=\"mt-3 mr-2 subpixel-antialiased sm:hidden md:block\">{props.chat.time}</div>\n    </div>\n  );\n};\n\n/**\n * Renders list of all available chat for a user\n */\nfunction ListOfChats(props) {\n  const [allChats, setAllChats] = useState([]);\n\n  // Fetch all chats for a current user\n  useEffect(() => {\n    Axios({\n      method: \"get\",\n      url: `http://localhost:5000/get_chats_by_user?username=${props.username}`,\n      headers: {\n        \"Access-Control-Allow-Origin\": \"http://localhost:3000\",\n        \"Content-Type\": \"application/json\",\n      },\n    }).then((res) => {\n      // sender message time\n      const new_data = res.data.chats.map((chat) => {\n        return {\n          key: chat[2],\n          name: chat[0] === props.username ? chat[1] : chat[0],\n          message: chat[4],\n          time: chat[5],\n        };\n      });\n      setAllChats(new_data);\n    });\n    const interval = setInterval(() => {\n      Axios({\n        method: \"get\",\n        url: `http://localhost:5000/get_chats_by_user?username=${props.username}`,\n        headers: {\n          \"Access-Control-Allow-Origin\": \"http://localhost:3000\",\n          \"Content-Type\": \"application/json\",\n        },\n      }).then((res) => {\n        // sender message time\n        const new_data = res.data.chats.map((chat) => {\n          return {\n            key: chat[2],\n            name: chat[0] === props.username ? chat[1] : chat[0],\n            message: chat[4],\n            time: chat[5],\n          };\n        });\n        setAllChats(new_data);\n      });\n      return () => clearInterval(interval);\n    }, 5000);\n  }, [setAllChats, props]);\n\n  /**Chooses chat on click and sets its id to current chosen chat\n    @param chat info about current chat\n  */\n  const chooseChat = (chat) => {\n    // Set current chat\n    console.log(chat);\n    props.setChosenChat(chat);\n  };\n\n  console.log(allChats);\n  return (\n    <div className=\"flex-col\">\n      {allChats.map((chat) => (\n        <Chat chooseChat={chooseChat} key={chat.key} chat={chat} />\n      ))}\n    </div>\n  );\n}\n\nfunction ListOfMessagesByChatID(props) {\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      Axios({\n        method: \"get\",\n        url: `http://localhost:5000/get_messages_by_chat_id?chat_id=${props.chat_id}`,\n        headers: {\n          \"Access-Control-Allow-Origin\": \"http://localhost:3000\",\n          \"Content-Type\": \"application/json\",\n        },\n      }).then((res) => {\n        const new_data = res.data.messages.map((message) => {\n          return {\n            name: message[1],\n            message: message[2],\n            time: message[3],\n          };\n        });\n\n        setMessages(new_data);\n      });\n    }, 100);\n    return () => {\n      clearInterval(interval);\n    };\n  });\n\n  return (\n    <div className=\"flex-col overflow-y-scroll message-list\">\n      {messages.map((message) => (\n        <div className=\"flex bg-gray-50 h-auto hover:bg-yellow-300 ml-10\">\n          <div className=\"flex-1 mt-3 whitespace-normal text-left\">\n            <div className=\"font-bold subpixel-antialiased inline-block\">{message.name}</div>\n            <div className=\"font-normal inline-block ml-4\">{message.time}</div>\n            <div className=\"font-normal truncate subpixel-antialiased text-left whitespace-normal pr-16 mt-2\">{message.message}</div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\n/**\n * Renders list of found users\n */\nconst ListOfUsers = (props) => {\n  // Create chat with selected user\n  const createChat = (selected_user) => {\n    console.log(selected_user[0]);\n    console.log(props.username);\n    Axios({\n      method: \"post\",\n      url: \"http://localhost:5000/create_chat\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"http://localhost:3000\",\n      },\n      data: {\n        username_1: props.username,\n        username_2: selected_user[0],\n      },\n    });\n  };\n\n  return (\n    <div>\n      {props.users.map((user) => (\n        <div key={user} className=\"flex bg-gray-50 h-16 hover:bg-yellow-200 cursor-pointer\" onClick={() => createChat(user)}>\n          <div className=\"flex-none\">\n            <div className={`inline-block h-10 w-10 rounded-full ring-2 ring-white m-3 bg-${\"yellow\"}-300`} alt=\"user_avatar\">\n              <div className=\"font-bold mt-2.5\">{user[0].toLocaleUpperCase()[0]}</div>\n            </div>\n          </div>\n          <div className=\"flex-1 mt-4 overflow-auto\">\n            <div className=\"font-medium flex justify-start subpixel-antialiased text-lg\">{user}</div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nfunction App() {\n  const [chosenChat, setChosenChat] = useState();\n\n  const [form] = useForm();\n\n  // Login screen\n  const [login, setLogin] = useState(true);\n  // Is authenticated\n  const [authenticated, setAuthenticated] = useState(false);\n  // Failed to login error message\n  const [failedToLogin, setFailedToLogin] = useState(false);\n  // Failed to register error message\n  const [failedToRegister, setFailedToRegister] = useState(false);\n  // Password and confirmation password doesn't match\n  const [passwordsDontMatch, setPasswordDontMatch] = useState(false);\n  // Current user username\n  const [username, setUsername] = useState(\"\");\n  // Search results\n  const [searchResults, setSearchResults] = useState([]);\n  // Search\n  const [search, setSearch] = useState(false);\n\n  // Send message and reset field to zero\n  const sendMessage = (msg) => {\n    form.resetFields([\"sent_message\"]);\n\n    // Empty messages don't get sent\n    if (msg.sent_message === \"\") {\n      return;\n    }\n\n    // Sent message to the server\n    Axios({\n      method: \"post\",\n      url: \"http://localhost:5000/msg\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"http://localhost:3000\",\n      },\n      data: { message: msg.sent_message, chat_id: chosenChat.key, sender: username },\n    });\n  };\n\n  // Sent request on login\n  const onLogin = (values) => {\n    setUsername(\"\");\n    setPasswordDontMatch(false);\n    setFailedToRegister(false);\n    setFailedToLogin(false);\n\n    if (values.login === \"\" || values.password === \"\") {\n      return;\n    }\n\n    // Construct form-data\n    const data = new FormData();\n    data.append(\"username\", values.login);\n    data.append(\"password\", values.password);\n\n    // Make a request to the server\n    Axios({\n      method: \"post\",\n      url: \"http://localhost:5000/login\",\n      headers: {\n        \"Access-Control-Allow-Origin\": \"http://localhost:3000\",\n        \"Content-Type\": \"multipart/form-data\",\n      },\n      data: data,\n    }).then((res) => {\n      // We're successfully logged in\n      if (res.data.status === \"success\") {\n        setAuthenticated(true);\n        setUsername(values.login);\n      } else {\n        setFailedToLogin(true);\n      }\n    });\n  };\n\n  // Registers user\n  const onRegistration = (values) => {\n    setUsername(\"\");\n    setPasswordDontMatch(false);\n    setFailedToRegister(false);\n    setFailedToLogin(false);\n\n    if (values.login === \"\" || values.password === \"\") {\n      return;\n    }\n\n    // Check if password and confirmation password match\n    if (values.password !== values.password_confirmation) {\n      setPasswordDontMatch(true);\n      return;\n    }\n\n    // Construct form-data\n    const data = new FormData();\n    data.append(\"username\", values.login);\n    data.append(\"password\", values.password);\n\n    // Make a request to the server\n    Axios({\n      method: \"post\",\n      url: \"http://localhost:5000/register\",\n      headers: {\n        \"Access-Control-Allow-Origin\": \"http://localhost:3000\",\n        \"Content-Type\": \"multipart/form-data\",\n      },\n      data: data,\n    }).then((res) => {\n      if (res.data.status === \"success\") {\n        // We are successfully registered\n        setAuthenticated(true);\n        setUsername(values.login);\n      } else {\n        setFailedToRegister(true);\n      }\n    });\n  };\n\n  // Search user by name\n  const onSearch = (values) => {\n    Axios({\n      method: \"post\",\n      url: \"http://localhost:5000/search\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"http://localhost:3000\",\n      },\n      data: {\n        username: values.search,\n      },\n    }).then((res) => {\n      setSearchResults(res.data.users);\n    });\n  };\n\n  // Checks if search query is empty\n  const onSearchChange = (str) => {\n    if (str.target.value !== \"\") {\n      setSearch(true);\n    } else {\n      setSearch(false);\n    }\n  };\n\n  return (\n    <div className={`App flex-none h-screen overflow-hidden`} style={{ backgroundColor: !authenticated ? \"#FCD34D\" : \"white\" }}>\n      {authenticated ? (\n        <Layout style={{ minHeight: \"100%\" }}>\n          <Layout.Sider theme=\"light\" width=\"18%\" className=\"\" style={{ backgroundColor: \"white\" }}>\n            <div className=\"text-xl text-left ml-4 font-bold\">{username}</div>\n            <Form onFinish={(values) => onSearch(values)}>\n              <Form.Item name=\"search\" noStyle>\n                <input\n                  placeholder=\"Поиск собеседника...\"\n                  onChange={(str) => onSearchChange(str)}\n                  className=\"w-full inline-block pl-4 ring-2 ring-gray-300 rounded-lg focus:outline-none\"\n                  style={{ height: \"40px\" }}\n                />\n              </Form.Item>\n              <button type=\"submit\"></button>\n            </Form>\n            {!search && <ListOfChats setChosenChat={setChosenChat} chosenChatId={chosenChat?.key} username={username} />}\n            {search && <ListOfUsers users={searchResults} username={username} />}\n          </Layout.Sider>\n          <Layout className=\"h-screen\" style={{ backgroundColor: \"#F9FAFB\" }}>\n            {chosenChat && (\n              <div className=\"h-screen overflow-hidden max-h-screen\">\n                <Affix offsetTop={0}>\n                  <div className=\"flex h-1/8 font-semibold text-2xl\" style={{ backgroundColor: \"#22B2DA\" }}>\n                    <div className=\"m-3 flex flex-row\">\n                      <div className=\"w-8 h-8 align-baseline cursor-pointer\" onClick={() => setChosenChat(null)}>\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n                        </svg>\n                      </div>\n                      <div className=\"pt-0.5\" style={{ color: \"#3B4A6B\" }}>\n                        {chosenChat.name}\n                      </div>\n                    </div>\n                  </div>\n                </Affix>\n\n                <ListOfMessagesByChatID chat_id={chosenChat.key} />\n\n                <Form onFinish={(msg) => sendMessage(msg)} form={form}>\n                  <Affix offsetBottom={18}>\n                    <div>\n                      <div className=\"bg-gray-200 flex flex-row p-2 mt-4\">\n                        <Form.Item name=\"sent_message\" noStyle>\n                          <input\n                            autoFocus\n                            autoComplete=\"off\"\n                            value=\"\"\n                            type=\"text\"\n                            placeholder=\"Введите свое сообщение...\"\n                            className=\"w-full rounded-2xl h-10 focus:outline-none inline-flex p-2\"\n                          />\n                        </Form.Item>\n                        <button className=\"inline-block w-8 h-8 mt-1 transform rotate-90 focus:outline-none \" type=\"submit\">\n                          <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            fill=\"none\"\n                            viewBox=\"0 0 24 24\"\n                            stroke=\"currentColor\"\n                            className=\"text-gray-600 cursor-pointer\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 19l9 2-9-18-9 18 9-2zm0 0v-8\" />\n                          </svg>\n                        </button>\n                      </div>\n                    </div>\n                  </Affix>\n                </Form>\n              </div>\n            )}\n          </Layout>\n        </Layout>\n      ) : (\n        <div>\n          <img className=\"w-1/5 h-1/5\" style={{ marginLeft: \"39%\" }} src={Logo} alt=\"\" />\n          <div className=\"flex-col justify-center\" style={{ marginLeft: \"40%\" }}>\n            <div className=\"flex flex-row\">\n              <div\n                onClick={() => setLogin(true)}\n                className=\"text-4xl text-left subpixel-antialiased font-sans font-black underline cursor-pointer w-1/16\"\n                style={{ color: login ? \"#3B4A6B\" : \"#22B2DA\" }}>\n                Вход\n              </div>\n              <div\n                onClick={() => setLogin(false)}\n                className=\"ml-3 text-4xl text-left subpixel-antialiased font-sans font-black underline cursor-pointer w-10\"\n                style={{ color: !login ? \"#3B4A6B\" : \"#22B2DA\" }}>\n                Регистрация\n              </div>\n            </div>\n            <div>\n              {login && (\n                <Form onFinish={(values) => onLogin(values)}>\n                  <Form.Item name=\"login\" noStyle>\n                    <input\n                      name=\"login\"\n                      className=\"flex w-4/12 ring-4 ring-yellow-300 h-10 rounded-2xl p-2 focus:outline-none text-lg focus:ring-blue-400\"\n                      placeholder=\"Логин\"\n                      style={{ marginTop: \"30px\" }}\n                    />\n                  </Form.Item>\n                  <Form.Item name=\"password\" noStyle>\n                    <input\n                      name=\"password\"\n                      className=\"flex w-4/12 ring-4 ring-yellow-300 h-10 rounded-2xl p-2 focus:outline-none text-lg focus:ring-blue-400 mt-4\"\n                      placeholder=\"Пароль\"\n                      type=\"password\"\n                    />\n                  </Form.Item>\n                  {failedToLogin && <div className=\"font-semibold text-xl text-left text-red-500\">Неверное имя пользователя или пароль</div>}\n                  <button\n                    type=\"submit\"\n                    className=\"mt-6 ml-0 flex justify-start focus:outline-none bg-yellow-500 rounded-full h-9 w-16 text-xl p-1 hover:bg-yellow-600\">\n                    Войти\n                  </button>\n                </Form>\n              )}\n              {!login && (\n                <Form onFinish={(values) => onRegistration(values)}>\n                  <Form.Item name=\"login\" noStyle>\n                    <input\n                      name=\"login\"\n                      className=\"flex w-4/12 ring-4 ring-yellow-300 h-10 rounded-2xl p-2 focus:outline-none text-lg focus:ring-blue-400\"\n                      placeholder=\"Логин\"\n                      style={{ marginTop: \"30px\" }}\n                    />\n                  </Form.Item>\n                  <Form.Item name=\"password\" noStyle>\n                    <input\n                      className=\"flex w-4/12 ring-4 ring-yellow-300 h-10 rounded-2xl p-2 focus:outline-none text-lg focus:ring-blue-400 mt-4\"\n                      placeholder=\"Пароль\"\n                      type=\"password\"\n                    />\n                  </Form.Item>\n                  <Form.Item name=\"password_confirmation\" noStyle>\n                    <input\n                      className=\"flex w-4/12 ring-4 ring-yellow-300 h-10 rounded-2xl p-2 focus:outline-none text-lg focus:ring-blue-400 mt-4\"\n                      placeholder=\"Подтверждение пароля\"\n                      type=\"password\"\n                    />\n                  </Form.Item>\n                  {failedToRegister && <div className=\"font-semibold text-xl text-left text-red-500\">Имя пользователя занято</div>}\n                  {passwordsDontMatch && <div className=\"font-semibold text-xl text-left text-red-500\">Пароли не совпадают</div>}\n                  <button\n                    type=\"submit\"\n                    className=\"mt-6 ml-0 flex justify-start focus:outline-none bg-yellow-500 rounded-full h-9 w-1/7 text-xl p-1 hover:bg-yellow-600\">\n                    Регистрация\n                  </button>\n                </Form>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"20","replacedBy":"21"},{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","severity":1,"message":"25","line":8,"column":7,"nodeType":"26","messageId":"27","endLine":8,"endColumn":10},{"ruleId":"24","severity":1,"message":"28","line":13,"column":10,"nodeType":"26","messageId":"27","endLine":13,"endColumn":32},"no-native-reassign",["29"],"no-negated-in-lhs",["30"],"no-unused-vars","'URL' is assigned a value but never used.","Identifier","unusedVar","'getAllMessagesByChatID' is defined but never used.","no-global-assign","no-unsafe-negation"]